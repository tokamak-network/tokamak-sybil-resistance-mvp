openapi: 3.0.0
info:
  description: |
    This Sybil node API is the layer that allows 3rd party apps and services to interface with the node to use the layer two features of the SYB rollup.
    Example of these apps are:
    * Wallet: send L2 transactions, check balance, ...
    * Explorer: List transactions, slots, batches, ...

    Note that some of the interactions with the rollup must be done using the Ethereum network directly.
    Another way to integrate with the rollup is to [deploy a node] and connect directly to its PostgreSQL database.
    
    ### Pagination
    
    #### Usage

    All the endpoints that return a list of undefined size use pagination. Unless the opposite is explicitly said.
    In order to use pagination, three query parameters are used:
    * `fromItem`: indicates the first item to be returned. In general, this parameter shouldn't be provided in the first call to the endpoint, and use the `itemId` of the last returned item (+/-) 1, if the order is (ascending/descending).
    * `order`: all paginated items are ordered chronologically. However, the specific fields to guarantee this order depend on each endpoint. For this purpose, `itemId` is used (itemId follows ascending chronological order except for unforged L1 user transactions). If the parameter is not provided, ascending order will be used by default. 
    * `limit`: maximum amount of items to include in each response. Default is 20, maximum is 2049.
    
    Responses for those endpoints will always include a `pendingItems` property. This property includes the amount of items that are not fetched yet. This can be used to:
    * Calculate the amount of items that match the filters: `totalItems = length(alreadyFetchedItems) + pendingItems`
    * Know when all items have been fetched: `if pendingItems == 0 {/* all items have been fetched */}`

    #### Reorgs and Safety

    Since all the items are ordered chronologically, there are no safety problems when fetching items in ascending order, except for reorgs (more on this later).
    On the other hand, when iterating in descending order, new items will be added at the beginning. This doesn't cause any safety problem, but to get those new items, it's necessary to start querying without the `fromItem` set to `pagination.lastItem`.
    To handle reorgs, the `itemId` can be used since it will change. This is important since other identifiers may be the same but with different content. As an example, if batch 424 gets reorged, it will be deleted, but eventually, a new batch 424 will appear with potentially different content. However, these two batches number 424, will have different `itemId`.

    More details on how to sign will be provided soon.

  version: "0.0.1"
  title: Sybil Network API
  license:
    name: license AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
servers:
  - description: Localhost, usefull for testing changes locally and required for unit tests
    url: http://localhost:4010/v1
tags:
  - name: Explorer
    description: Endpoints used by the nodes running in explorer mode. They are used to get information of the netwrok.
paths:
  '/accounts':
    get:
      tags:
        - Explorer
      summary: Get accounts balances and other associated information.
      description: Get account balances and other associated information.
      operationId: getAccounts
      parameters:
        - name: tonEthereumAddress
          in: query
          description: Only get accounts associated to an Ethereum address.
          required: false
          schema:
            $ref: '#/components/schemas/TonEthereumAddress'
        - name: fromItem
          in: query
          required: false
          description: Indicates the desired first item (using the itemId property) to be included in the response.
          schema:
            type: number
        - name: order
          in: query
          required: false
          description: Order of the returned items. Accounts will be ordered by increasing account index.
          schema:
            type: string
            default: ASC
            enum:
                - ASC
                - DESC
        - name: limit
          in: query
          required: false
          description: Maximum number of items to be returned.
          schema:
            type: integer
            minimum: 1
            maximum: 2049
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'

components:
  schemas:
    ItemId:
      type: integer
      description: Position of the item in the DB. This is useful for pagination, but has  nothing to do with the protocol.
    EthereumAddress:
      type: string
      description: "Address of an Ethereum account."
      pattern: "^0x[a-fA-F0-9]{40}$"
      example: "0xaa942cfcd25ad4d90a62358b0dd84f33b398262a" 
    TonEthereumAddress:
      type: string
      description: "Address of an Ethereum account linked to the Hermez Network."
      pattern: "^ton:0x[a-fA-F0-9]{40}$"
      example: "ton:0xaa942cfcd25ad4d90a62358b0dd84f33b398262a" 
    AccountIndex:
      type: string
      description: >-
        Identifier of an account. It references the position where the account is inside the state Merkle tree.
        The identifier is built using: `ton:` + `token symbol:` + `index`
      example: "ton:DAI:4444"
    BigInt:
      type: string
      description: BigInt is an integer encoded as a string for numbers that are very large.
      example: "8708856933496328593"
      pattern: "^\\d+$"
    Nonce:
      type: integer
      description: Number that can only be used once per account, increments by one at each transaction.
      minimum: 0
      maximum: 1.84467440737096e+19
      example: 121
    Account:
      type: object
      description: State tree leaf. It contains balance and nonce of an account.
      properties:
        itemId:
          $ref: '#/components/schemas/ItemId'
        accountIndex:
          $ref: '#/components/schemas/AccountIndex'
        nonce:
          $ref: '#/components/schemas/Nonce'      
        balance:
          $ref: '#/components/schemas/BigInt'   
        tonEthereumAddress:
          $ref: '#/components/schemas/TonEthereumAddress'
      example:
        accountIndex: ton:259
        balance: '2590000000000000000'
        tonEthereumAddress: ton:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
        itemId: 4
        nonce: 0
      additionalProperties: false
      required:
        - itemId
        - accountIndex
        - nonce
        - balance
        - tonEthereumAddress
    Accounts:
      type: object
      properties:
        accounts:
          type: array
          description: List of accounts.
          items: 
            $ref: '#/components/schemas/Account'
        pendingItems:
          $ref: '#/components/schemas/PendingItems'
      example:
        accounts:
        - accountIndex: ton:ETH:259
          balance: '2590000000000000000'
          tonEthereumAddress: ton:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
          itemId: 4
          nonce: 0
        - accountIndex: ton:TKN1:261
          balance: '2610000000'
          tonEthereumAddress: ton:0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf
          itemId: 6
          nonce: 0
        pendingItems: 0
      additionalProperties: false
      required:
        - accounts
        - pendingItems
    PendingItems:
      type: integer
      description: Amount of items that will be returned in subsequent calls to the endpoint, as long as they are done with same filters. When the value is 0 it means that all items have been sent.
      example: 15
    Health:
      type: object
      description: Return values that can be valuable for the /health endpoint.
      properties:
        historyDB:
          type: object
          description: History db connection status
          properties:
            last_migration:
              type: string
              description: Name of the last migration
              example: 0002.sql
            status:
              type: string
              description: Status of the connection. Possible responses - UP or DOWN
              example: UP
            version:
              type: string
              description: Version of the database
              example: PostgreSQL 13.2 (Debian 13.2-1.pgdg100+1) on x86_64-pc-linux-gnu
          required:
            - last_migration
            - status
            - version
          additionalProperties: false
          required:
            - last_migration
            - status
            - version
          additionalProperties: false
        statedb:
          type: object
          description: state db connection status
          properties:
            status:
              type: string
              description: Status of the connection. Possible responses - UP or DOWN
              example: UP
            batchNum:
              type: integer
              description: current batch num in last checkpoint of the state db
              example: 24025
            root:
              type: integer
              description: root of the underlying Merkle Tree in the last checkpoint of the state db
              example: 20723800499378797360494097450413598946834655273323161758167114779532027183222
        status:
          type: string
          description: Status of the hermez node. Possible responses - UP or DOWN
          example: UP
        timestamp:
          type: string
          format: date-time
          description: Current time with location set to UTC
        version:
          type: string
          description: Current version of the hermez-node
          example: v1.2.0
        coordinatorForgerBalance:
          type: string
          description: Coordinator balance in ether. Returned with 18 decimals. Not returned if node not in coord mode
          example: 48901270356066543960
      required:
        - historyDB
        - status
        - timestamp
        - version
      additionalProperties: false
    Error:
      type: object
      description: Error response. 
      properties:
        message:
          type: string
        code:
          type: integer
          enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
          description: >
            Error codes:
              * `1` - ErrParamValidationFailed error
              * `2` - ErrDuplicatedKey error
              * `3` - ErrSQLTimeout error
              * `4` - ErrSQLNoRows error
              * `5` - ErrExitAmount0 error
              * `6` - ErrInvalidTxTypeOrTxID error
              * `7` - ErrFeeOverflow error
              * `8` - ErrGettingSenderAccount error
              * `9` - ErrGettingSenderAccount error
              * `10` - ErrInvalidNonce error
              * `11` - ErrInvalidSignature error
              * `12` - ErrGettingReceiverAccount error
              * `13` - ErrCantSendToEthAddr error
              * `14` - ErrNotAtomicTxsInPostPoolTx error
              * `15` - ErrFailedToGetCurrentBlock error
              * `16` - ErrFailedToGetAuctionVars error
              * `17` - ErrFailedToAddEmptySlot error
              * `18` - ErrTxsNotAtomic error
              * `19` - ErrSingleTxInAtomicEndpoint error
              * `20` - ErrRqOffsetOutOfBounds error
              * `21` - ErrInvalidAtomicGroupID error
              * `22` - ErrFailedToFindOffsetToRelativePositionCode error
        type:
          type: string
          enum:
            - ErrParamValidationFailed
            - ErrDuplicatedKey
            - ErrSQLTimeout
            - ErrSQLNoRows
            - ErrExitAmount0
            - ErrInvalidTxTypeOrTxID
            - ErrFeeOverflow
            - ErrGettingSenderAccount
            - ErrAccountTokenNotEqualTxToken
            - ErrInvalidNonce
            - ErrInvalidSignature
            - ErrGettingReceiverAccount
            - ErrCantSendToEthAddr
            - ErrNotAtomicTxsInPostPoolTx
            - ErrFailedToGetCurrentBlock
            - ErrFailedToGetAuctionVars
            - ErrFailedToAddEmptySlot
            - ErrTxsNotAtomic
            - ErrSingleTxInAtomicEndpoint
            - ErrInvalidAtomicGroupID
            - ErrFailedToFindOffsetToRelativePosition
          description: >
            Error types:
              * `ErrParamValidationFailed` - this error appears when user sends wrong info in query|uri|form params
              * `ErrDuplicatedKey` - record already exists in db
              * `ErrSQLTimeout` - node is under heavy pressure and sql connection timeout happened
              * `ErrSQLNoRows` - there is no such item in database
              * `ErrExitAmount0` - receiving (and rejecting) a tx of type exit with amount 0 in /transactions-pool request
              * `ErrInvalidTxTypeOrTxID` - tx with invalid type or txID was sent in /transactions-pool request
              * `ErrFeeOverflow` - tx with fee amount that doesn't fit in 128 bits was sent in /transactions-pool request
              * `ErrGettingSenderAccount` - sender account for tx was not found in /transactions-pool request
              * `ErrAccountTokenNotEqualTxToken` - account token is not equal to tx token in /transactions-pool request
              * `ErrInvalidNonce` - invalid nonce was sent in /transactions-pool request
              * `ErrInvalidSignature` - invalid signature was sent in /transactions-pool or /account-creation-authorization requests
              * `ErrGettingReceiverAccount` - receiver account for tx was not fount in /transactions-pool request
              * `ErrCantSendToEthAddr` - it's not possible to send to Eth address when there is no account index associated to this Eth address and token, or the coordinator hasn't got an authorization to create an account
              * `ErrNotAtomicTxsInPostPoolTx` - user sending atomic tx to /transactions-pool request
              * `ErrFailedToGetCurrentBlock` - can't get current block in /slots request
              * `ErrFailedToGetAuctionVars` - can't get auction vars in /slots request
              * `ErrFailedToAddEmptySlot` - can't add empty slot in /slots request
              * `ErrTxsNotAtomic` - there is at least one transaction in the payload that could be forged without the others
              * `ErrSingleTxInAtomicEndpoint` - to use the atomic-pool endpoint at least two transactions are required
              * `ErrRqOffsetOutOfBounds` - one of the transactions requested another one outside the bounds of the provided array
              * `ErrInvalidAtomicGroupID` - invalid atomicGroupId
              * `ErrFailedToFindOffsetToRelativePosition` - can't find offset to relative position
    Error400:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            message: Invalid signature.
            code: 4
            type: ErrInvalidSignature
    Error404:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            message: Item(s) not found.
    Error500:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            message: Database error.
    Error503:
      allOf:
        - $ref: '#/components/schemas/Error'
        - example:
            message: Service unavailable.
